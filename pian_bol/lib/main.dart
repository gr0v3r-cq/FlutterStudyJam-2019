import 'package:audioplayers/audio_cache.dart'; import 'package:flutter/material.dart'; import 'package:pian_bol/line.dart'; import 'package:pian_bol/line_divider.dart'; import 'package:pian_bol/note.dart'; import 'package:pian_bol/song_provider.dart';
void main() => runApp(MyApp());
class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData( primarySwatch: Colors.blue, ), home: MainPage(), ); } }
class MainPage extends StatefulWidget { @override _MainPageState createState() => _MainPageState(); }
class _MainPageState extends State<MainPage> with SingleTickerProviderStateMixin { AudioCache player = new AudioCache(); List<Note> notes = initNotes(); AnimationController animCont; int cNoteInd = 0; int points = 0; bool hSt = false; bool play = true; @override void initState() { super.initState(); animCont = AnimationController(vsync: this, duration: Duration(milliseconds: 300)); animCont.addStatusListener((status) { if (status == AnimationStatus.completed && play) { if (notes[cNoteInd].state != NoteState.tapped) { setState(() { play = false; notes[cNoteInd].state = NoteState.missed; }); animCont.reverse().then((_) => _showFinishDialog()); } else if (cNoteInd == notes.length - 5) { _showFinishDialog(); } else { setState(() => ++cNoteInd); animCont.forward(from: 0); } } }); } @override void dispose() { animCont.dispose(); super.dispose();} @override Widget build(BuildContext context) { return Material( child: Stack( fit: StackFit.passthrough, children: <Widget>[ Image.asset( 'assets/background.jpg', fit: BoxFit.cover,), Row( children: <Widget>[ _drawLine(0), LineDivider(), _drawLine(1), LineDivider(), _drawLine(2), LineDivider(), _drawLine(3), ], ), _drawPoints(), ], ), ); } void _restart() { setState(() { hSt = false; play = true; notes = initNotes(); points = 0; cNoteInd = 0; }); animCont.reset();} void _showFinishDialog() { showDialog( context: context, builder: (context) { return AlertDialog( title: Text("Score: $points"), actions: <Widget>[ FlatButton( onPressed: () => Navigator.of(context).pop(), child: Text("RESTART"), ), ], ); }, ).then((_) => _restart()); } void _onTap(Note note) { bool areAllPreviousTapped = notes.sublist(0, note.oNum).every((n) => n.state == NoteState.tapped); print(areAllPreviousTapped); if (areAllPreviousTapped) { if (!hSt) { setState(() => hSt = true); animCont.forward(); } _playNote(note); setState(() { note.state = NoteState.tapped; ++points;}); } } _drawLine(int lineNumber) { return Expanded( child: Line( linNum: lineNumber, currNot: notes.sublist(cNoteInd, cNoteInd + 5), onTTap: _onTap, animation: animCont, ), );} _drawPoints() { return Align( alignment: Alignment.topCenter, child: Padding( padding: const EdgeInsets.only(top: 32.0), child: Text( "$points", style: TextStyle(color: Colors.red, fontSize: 60), ), ), ); } _playNote(Note note) { switch (note.line) { case 0: player.play('a.wav'); return; case 1: player.play('c.wav'); return; case 2: player.play('e.wav'); return; case 3: player.play('f.wav'); return; } } }